services:
  login_app:
    build:
      context: ./login_service
      dockerfile: dockerfile
    image: 'login_service-image:latest'
    container_name: 'login_service-container'
    restart: always
    stdin_open: true
    tty: true
    volumes:
      - ./login_service:/login_service  # 프로젝트와 컨테이너를 마운트 시켜 즉각적으로 반영되도록 설정
    ports:
      - "${LOGIN_HOST_PORT}:${LOGIN_SERVER_PORT}"
    env_file:
      - .env
    depends_on:
      - user_db
    networks:
      - login_service-network
    
  user_db:
    image: mariadb:latest
    container_name: 'user_db-cotainer'
    restart: always
    environment:
      - "MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}"  # 루트 사용자 비밀번호
      - "MYSQL_DATABASE=${MARIADB_DB_NAME}"             # 자동 생성할 DB 이름
    volumes:
      - ./data/user_db:/data/user_db/mariadb
    env_file:
      - .env
    ports:
      - "${MARIADB_HOST_PORT}:${MARIADB_SERVER_PORT}"
    networks:
      - login_service-network
  
  crawling_app:
    build:
      context: ./crawling_service
      dockerfile: dockerfile
    image: 'crawling_service-image:latest'
    container_name: 'crawling_service-container'
    restart: always
    stdin_open: true
    tty: true
    volumes:
      - ./crawling_service:/crawling_service
    ports:
      - "${CRAWLING_HOST_PORT}:${CRAWLING_SERVER_PORT}"
    env_file:
      - .env
    depends_on:
      - crawling_db
    networks:
      - crawling_service-network  

  crawling_db:
    image: mongo:latest
    container_name: 'crawling_db-container'
    restart: always
    volumes:
      - ./data/crawling_db:/data/crawling_db/mongodb
    env_file:
      - .env
    ports:
      - '${MONGODB_HOST_PORT}:${MONGODB_SERVER_PORT}'
    networks:
      - crawling_service-network

networks:
  login_service-network:
    name: login_service
  crawling_service-network:
    name: crawling_service
    