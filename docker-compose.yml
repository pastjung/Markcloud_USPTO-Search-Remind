services:
  login_app:
    build:
      context: ./login_service
      dockerfile: dockerfile
    image: 'login_service-image:latest'
    container_name: 'login_service-container'
    restart: always
    stdin_open: true
    tty: true
    volumes:
      - ./login_service:/login_service  # 프로젝트와 컨테이너를 마운트 시켜 즉각적으로 반영되도록 설정
    ports:
      - "${LOGIN_HOST_PORT}:${LOGIN_SERVER_PORT}"
    env_file:
      - .env
    depends_on:
      - user_db
      - crawling_app
    networks:
      - login_service-network
    
  user_db:
    image: mariadb:latest
    container_name: 'user_db-cotainer'
    restart: always
    environment:
      - "MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}"  # 루트 사용자 비밀번호
      - "MYSQL_DATABASE=${MARIADB_DB_NAME}"             # 자동 생성할 DB 이름
    volumes:
      - ./data/user_db:/data/user_db/mariadb
    env_file:
      - .env
    ports:
      - "${MARIADB_HOST_PORT}:${MARIADB_SERVER_PORT}"
    networks:
      - login_service-network
  
  crawling_app:
    build:
      context: ./crawling_service
      dockerfile: dockerfile
    image: 'crawling_service-image:latest'
    container_name: 'crawling_service-container'
    restart: always
    stdin_open: true
    tty: true
    volumes:
      - ./crawling_service:/crawling_service
    ports:
      - "${CRAWLING_HOST_PORT}:${CRAWLING_SERVER_PORT}"
    env_file:
      - .env
    depends_on:
      - crawling_db
      - es01
    networks:
      - crawling_service-network  

  crawling_db:
    image: mongo:latest
    container_name: 'crawling_db-container'
    restart: always
    volumes:
      - ./data/crawling_db:/data/crawling_db/mongodb
    env_file:
      - .env
    ports:
      - '${MONGODB_HOST_PORT}:${MONGODB_SERVER_PORT}'
    networks:
      - crawling_service-network
      - search_service-network  

  search_app:
    build:
      context: ./search_service
      dockerfile: dockerfile
    image: 'search_service-image:latest'
    container_name: 'search_service-container'
    restart: always
    stdin_open: true
    tty: true
    volumes:
      - ./search_service:/search_service
    ports:
      - "${SEARCH_HOST_PORT}:${SEARCH_SERVER_PORT}"
    env_file:
      - .env
    depends_on:
      - crawling_db
    networks:
      - crawling_service-network
      - search_service-network  

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch/es01:/usr/share/elasticsearch/data   # /usr/share/elasticsearch/data : Elasticsearch 컨테이너 내의 기본 설정 파일 경로
    ports:
      - "${ELASTICSEARCH_HOST_PORT}:${ELASTICSEARCH_SERVER_PORT}"
    env_file:
      .env
    networks:
      - crawling_service-network
      - search_service-network 

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch/es02:/usr/share/elasticsearch/data
    networks:
      - crawling_service-network
      - search_service-network 

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch/es03:/usr/share/elasticsearch/data
    networks:
      - crawling_service-network
      - search_service-network 

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0  # Kibana 버전 = Elasticsearch 버전
    container_name: 'kibana-container'
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://es01:${ELASTICSEARCH_SERVER_PORT}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}  # Elasticsearch 비밀번호와 동일
      - SERVER_NAME=kibana
    ports:
      - "${KIBANA_HOST_PORT}:${KIBANA_SERVER_PORT}"
    depends_on:
      - es01
    env_file:
      - .env
    networks:
      - search_service-network 

networks:
  login_service-network:
    name: login_service
  crawling_service-network:
    name: crawling_service
  search_service-network:
    name: search_service
    